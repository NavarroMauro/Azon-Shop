import { type NextPage } from "next";
import type { CartItem } from "../types/cart";
import { signIn, signOut, useSession } from "next-auth/react";
import Head from "next/head";
import Image from "next/image";
// import { useQueryClient } from "@tanstack/react-query";
import { trpc } from "../utils/trpc";
import { type Product } from "@prisma/client";

const Home: NextPage = () => {
  const utils = trpc.useContext();
  const cartUser = trpc.cart.getUserCart.useQuery(undefined, {
    enabled: false,
  });
  const { data: sessionData } = useSession();
  const userId = sessionData?.user?.id || "hi";
  const cartItems = trpc.cart.getCartItems.useQuery();

  const { data: secretMessage } = trpc.auth.getSecretMessage.useQuery(
    undefined, // no input
    { enabled: sessionData?.user !== undefined }
  );

  console.log(secretMessage);

  const trpcTest = trpc.product.getAll.useQuery(20);
  const addToCart = trpc.cart.addItem.useMutation({
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore
    async onMutate(el: { userId: string; item: Product; quantity: number }) {
      await utils.cart.getCartItems.cancel();
      console.log(el);
      const prevData = utils.cart.getCartItems.getData();
      if (!prevData) return;
      const newItem = {
        id: (Math.random() + 1).toString(36).substring(7),
        product: el.item,
        productId: el.item.id,
        quantity: el.quantity,
        cart: cartUser.data,
        cartId: cartUser?.data?.id,
      };
      // eslint-disable-next-line @typescript-eslint/ban-ts-comment
      // @ts-ignore
      utils.cart.getCartItems.setData(undefined, (old) => [...old, newItem]);
      return { prevData };
    },
    onError(err, newPost, ctx) {
      // If the mutation fails, use the context-value from onMutate
      // eslint-disable-next-line @typescript-eslint/ban-ts-comment
      // @ts-ignore
      utils.cart.getCartItems.setData(undefined, ctx.prevData);
    },
    onSettled() {
      utils.cart.getCartItems.invalidate();
    },
  });

  let totalQuantity = 0;
  cartItems?.data?.forEach((el) => {
    totalQuantity += el.quantity;
  });
  console.log(totalQuantity);
  const removeFromCart = trpc.cart.removeItem.useMutation({
    async onMutate(id: string) {
      await utils.cart.getCartItems.cancel();
      const prevData = utils.cart.getCartItems.getData();
      const newItems = prevData?.filter((item) => item.id !== id);
      utils.cart.getCartItems.setData(undefined, () => newItems);
      return { prevData };
    },
    onError(err, newPost, ctx) {
      utils.cart.getCartItems.setData(undefined, ctx?.prevData);
    },
    onSettled() {
      utils.cart.getCartItems.invalidate();
    },
  });
  const removeCart = trpc.cart.removeCart.useMutation({
    async onMutate() {
      await utils.cart.getCartItems.cancel();
      const prevData = utils.cart.getCartItems.getData();
      utils.cart.getCartItems.setData(undefined, () => []);
      return { prevData };
    },
    onError(err, newPost, ctx) {
      utils.cart.getCartItems.setData(undefined, ctx?.prevData);
    },
    onSettled() {
      utils.cart.getCartItems.invalidate();
    },
    onSuccess() {
      utils.cart.getUserCart.refetch();
    },
  });
  const removeOne = trpc.cart.removeOne.useMutation({
    async onMutate(el: CartItem) {
      await utils.cart.getCartItems.cancel();
      const prevData = utils.cart.getCartItems.getData();
      prevData?.forEach((item) => {
        if (item.id === el.id) {
          item.quantity--;
        }
      });

      utils.cart.getCartItems.setData(undefined, () => prevData);
      return { prevData };
    },
    onError(err, newPost, ctx) {
      utils.cart.getCartItems.setData(undefined, ctx?.prevData);
    },
    onSettled() {
      utils.cart.getCartItems.invalidate();
    },
  });

  const addToCartHandler = (el: Product) => {
    console.log(el);
    return addToCart.mutate({ userId, item: el, quantity: 5 });
  };

  const deleteOne = (el: CartItem) => {
    if (el.quantity === 1) {
      return removeFromCart.mutate(el.id);
    }
    if (el.quantity > 1) {
      return removeOne.mutate(el);
    }
  };

  const deleteCart = () => {
    return removeCart.mutate(userId);
  };

  // const trpcCategory = trpc.category.getOneCategory.useQuery("Kindle");
  // const trpcCategories = trpc.category.getAllCategories.useQuery();
  // const trpcTest2 = trpc.product.getOne.useQuery("clb3p3i59000055f8b7gejbm7");
  // if (cartItems?.data[0]) {
  //   const totalPrice =
  //     cartItems?.data[0]?.quantity * Number(cartItems?.data[0]?.product.price);
  //   console.log(totalPrice);
  // }

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center overflow-hidden bg-gradient-to-b from-[#2e026d] to-[#15162c]">
        <div className="fixed top-0 left-4 mt-3 text-xl text-white">
          Cart
          <span className="absolute -top-2 -right-6 inline-flex h-6 w-6 items-center justify-center rounded-full border-2 border-white bg-red-500 text-xs font-bold text-white dark:border-gray-900">
            {totalQuantity}
          </span>
        </div>
        <div className="mt-5 flex gap-4">
          <button
            className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
            onClick={sessionData ? () => signOut() : () => signIn()}
          >
            {sessionData ? "Sign out" : "Sign in"}
          </button>
          <button
            className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
            onClick={deleteCart}
          >
            Delete Cart
          </button>
        </div>
        <div className="flex w-screen items-end gap-4 overflow-x-scroll px-12 py-12">
          {trpcTest.data?.map((el) => {
            return (
              <div
                className="flex flex-col items-center gap-4 text-xl text-white"
                key={el.id}
              >
                <span>{el.id}</span>
                <span>{el.title}</span>
                <Image alt={el.title} src={el.image} width={200} height={200} />
                <button
                  className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
                  onClick={() => addToCartHandler(el)}
                >
                  Add to Cart
                </button>
              </div>
            );
          })}
        </div>
        <div className="flex w-screen items-end gap-4 overflow-x-scroll px-12 py-12">
          {cartItems?.data?.map((el) => {
            return (
              <div
                key={el.id}
                className="flex flex-col items-center gap-4 text-xl text-white"
              >
                <span>{el.product.title}</span>
                <span>{el.quantity}</span>

                <Image
                  alt={el.product.title}
                  src={el.product.image}
                  width={200}
                  height={200}
                />

                <button
                  className="rounded-full bg-red-700 px-10 py-3 font-semibold text-white no-underline transition hover:bg-red-800"
                  onClick={() => deleteOne(el)}
                >
                  Remove One
                </button>
              </div>
            );
          })}
        </div>
      </main>
    </>
  );
};

export default Home;
