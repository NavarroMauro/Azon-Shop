// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

// Shop 
model Category {
  id        String    @id @default(cuid())
  name      String    @unique
  createdAt DateTime  @default(now())
  products  Product[]
}

model CartItem {
  id        String  @id @default(cuid())
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  quantity  Int

  cart   Cart   @relation(fields: [cartId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  cartId String

  @@index([productId])
  @@index([cartId])
}

model Cart {
  id        String     @id @default(cuid())
  createdAt DateTime   @default(now())
  user      User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?    @unique
  items     CartItem[]

  @@index([userId])
}

model Product {
  id          String     @id @default(cuid())
  title       String     @unique
  description String
  price       String
  quantity    Int
  image       String
  createdAt   DateTime   @default(now())
  category    Category?  @relation(fields: [categoryId], references: [id])
  categoryId  String?
  CartItem    CartItem[]
  Ratings     Ratings[]

  @@index([categoryId])
}

model Ratings {
  id        String   @id @default(cuid())
  rating    Int
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  heading   String
  message   String
  userName  String?
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?

  @@index([productId])
  @@index([userId])
}

model Order {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  user         User?    @relation(fields: [userId], references: [id])
  userId       String?
  status       String
  totalAmount  Int
  customerNote String

  @@index([userId])
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum Role {
  USER
  ADMIN
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  orders        Order[]
  accounts      Account[]
  sessions      Session[]
  Cart          Cart?
  role          Role      @default(USER)
  ratingsGiven  Ratings[]
}
